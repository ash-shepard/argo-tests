apiVersion: v1
kind: ConfigMap
metadata:
  name: argocd-notifications-cm
  namespace: argocd
  uid: 51215def-712a-4083-ba95-cf9c86b6c87c
  resourceVersion: '43762'
  creationTimestamp: '2024-04-02T19:38:11Z'
  labels:
    app.kubernetes.io/component: notifications-controller
    app.kubernetes.io/name: argocd-notifications-controller
    app.kubernetes.io/part-of: argocd
    k8slens-edit-resource-version: v1
  annotations:
    kubectl.kubernetes.io/last-applied-configuration: >
      {"apiVersion":"v1","kind":"ConfigMap","metadata":{"annotations":{},"labels":{"app.kubernetes.io/component":"notifications-controller","app.kubernetes.io/name":"argocd-notifications-controller","app.kubernetes.io/part-of":"argocd"},"name":"argocd-notifications-cm","namespace":"argocd"}}
  managedFields:
    - manager: kubectl-client-side-apply
      operation: Update
      apiVersion: v1
      time: '2024-04-02T19:38:11Z'
      fieldsType: FieldsV1
      fieldsV1:
        f:metadata:
          f:annotations:
            .: {}
            f:kubectl.kubernetes.io/last-applied-configuration: {}
          f:labels:
            .: {}
            f:app.kubernetes.io/component: {}
            f:app.kubernetes.io/name: {}
            f:app.kubernetes.io/part-of: {}
    - manager: node-fetch
      operation: Update
      apiVersion: v1
      time: '2024-04-03T20:51:40Z'
      fieldsType: FieldsV1
      fieldsV1:
        f:data:
          .: {}
          f:service.webhook.github: {}
          f:template.app-auto-promote-ready-1: {}
          f:trigger.app-promotion-ready: {}
        f:metadata:
          f:labels:
            f:k8slens-edit-resource-version: {}
  selfLink: /api/v1/namespaces/argocd/configmaps/argocd-notifications-cm
data:
  service.webhook.github: |
    url: https://api.github.com
    headers: #optional headers
    - name: Authorization
      value: token $github-token
  template.app-auto-promote-ready-2: |
    webhook:
      github:
        method: POST
        path: /repos/ash-shepard/argo-tests/dispatches
        body: |
          {"event_type": "auto-promote-notification-2", "client_payload": {"component": "{{ .app.metadata.annotations.component }}", "stage":"{{ .app.metadata.annotations.stage }}"}}
  trigger.app-promotion-ready-2: >
    - when: app.status.operationState != nil and app.status.operationState.phase
    in ['Succeeded'] and app.status.health.status == 'Healthy'
      oncePer: app.status.operationState != nil and app.status.operationState.operation.sync.revision
      send:
      - app-auto-promote-ready-2